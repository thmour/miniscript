#!/usr/bin/env node

(function() {
	var util = require('util'),
		path = require('path'),
	    fs   = require('fs'),
	    vm   = require('vm'),
	    repl = require('repl'),
		mini = require('../lib/mini.js');

	var args = process.argv.slice(2);

	if(args[0] === '-h') {
	    console.log('\n\tMinicript version:', require('../package.json').version, '\n');
	    console.log('\t\t* mini:', 'Starts the interactive console', '\n');
		console.log('\t\t* mini -v:', 'Displays the above version', '\n');
		console.log('\t\t* mini -r filename:', 'Compiles and runs the file input', '\n');
		console.log('\t\t* mini -c filename [-o output]:', 'Compiles the specified file', '\n');
		console.log('\t\t* mini -d dirname  [-o output]:', 'Compiles every ".mini" file and copies others to output directory', '\n');
	} else if(args[0] === '-v') {
		console.log('\tMinicript version:', require('../package.json').version);
	} else if(args[0] === '-r') { 
		var fn = args[1], dir;

		if(!path.extname(fn)) fn += '.mini';

		if(fs.existsSync(fn)) {
			fn = path.resolve(fn);

			process.argv = ['Miniscript', fn].concat(args.slice(2));

			mini.register()

			module.filename = fn;
			module.moduleCache = {};
			module.paths = require('module')._nodeModulePaths(path.dirname(fn));
			
			module._compile(mini.compile(fs.readFileSync(fn).toString()), module.filename);
		} else {
			console.log('Read Error: File input does not exist');
		}
	} else if(args[0] === '-c') {
	    var src = args[1], out;

		if(!path.extname(src)) src += '.mini';

		out = (args[2] == '-o') ? args[3] : src.replace(path.extname(src), '.js')

		if(!path.extname(out)) out += '.js';

		if(fs.existsSync(src)) {
			var src_text = fs.readFileSync(src).toString();
			var out_text = mini.compile(src_text);
			
			fs.writeFileSync(out, out_text);
		} else {
			console.log('Read Error: File input does not exist');
		}
	} else if (args[0] === '-d') {
		var input_dir = args[1],
			output_dir = (args[2] == '-o') ? args[3] : input_dir + '_js';

		if(!fs.lstatSync(input_dir).isDirectory()) {
			console.log('Input error: path specified is not a directory');
		} else {
			var contents = [{path: '', ls: fs.readdirSync(input_dir)}], curr;

			while(curr = contents[0]) {
				if(!fs.existsSync(output_dir + curr.path)) fs.mkdirSync(output_dir + curr.path);

				for (var i = 0, len = curr.ls.length; i < len; ++i) {
					var input = input_dir + curr.path + '/' + curr.ls[i];

					if (fs.lstatSync(input).isFile()) {
						if(path.extname(input) === '.mini') {
							var output_path = output_dir + curr.path + '/' + curr.ls[i].slice(0, -5) + '.js';
							try {
								var output_text = mini.compile(fs.readFileSync(input).toString(), true);
							} catch (error) {
								console.log('Error during compile on: "' + input + '"');
								console.log(error.message);
								return;
							}
							fs.writeFileSync(output_path, output_text);
						} else {
							try {
								fs.createReadStream(input).pipe(fs.createWriteStream(output_dir + curr.path + '/' + curr.ls[i]));
							} catch (error) {
								console.log('Copy error: ' + error.minig);
							}
							
						}
					} else if (fs.lstatSync(input).isDirectory()) {
						contents.push({path:curr.path + '/' + curr.ls[i], ls: fs.readdirSync(input)});
					}
				}
				contents.shift();
			}
		}
	} else {
		var result, input;

		console.log('\nMinicript version:', require('../package.json').version);
		console.log('Press Ctrl+C (SIGINT) to exit or cancel multi-line statement.\n');

		repl.start({
			eval: function (cmd, context, filename, callback) {
				input = cmd.replace(/\uFF00/g, '\n').replace(/^\(([\s\S]*)\n\)$/m, '$1');
				try {
					result = vm.runInContext(mini.compile(input), context);
					callback(null, result);
				} catch (error) {
					if (error.message.indexOf("got 'EOF'") !== -1) {
						this.bufferedCommand = input;
						this.displayPrompt();
					} else {
						callback(error);
					}
				}
			}
		});
	}
})();